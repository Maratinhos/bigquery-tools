version: '3.8'

services:
  db:
    image: postgres:15-alpine # Use a specific recent stable version
    container_name: bigquery_tools_db
    environment:
      POSTGRES_USER: bigquery_tools_user
      POSTGRES_PASSWORD: orange100.new-pack.club
      POSTGRES_DB: bigquery_tools_db
    volumes:
      - ./postgresql/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bigquery_tools_user -d bigquery_tools_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: bigquery_tools_backend
    ports:
      - "5000:5000"
    depends_on:
      db:
        condition: service_healthy # Waits for db healthcheck to pass
    env_file:
      - ./backend/.env # Load environment variables from .env file
    volumes:
      - ./backend:/app # Mounts your local backend code into the container for development
                       # For production, you might remove this and rely on the COPY in Dockerfile
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"] # Assuming Flask runs on port 5000
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s # Give it time to start up, run migrations etc.

  frontend:
    build:
      context: ./bigquery-tools-frontend # Path to frontend project
      dockerfile: Dockerfile # Dockerfile within ./bigquery-tools-frontend
    container_name: bigquery_tools_frontend
    ports:
      - "8080:80" # Expose Nginx port 80 to host port 8080
    depends_on:
      - backend # Frontend depends on backend for API calls
    restart: unless-stopped
    # Optional: Add healthcheck for Nginx if needed, though typically not as critical as backend
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost/"] # Nginx serves on port 80
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3

volumes:
  postgres_data: